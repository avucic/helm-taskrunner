* helm-taskrunner
Helm-taskrunner is a Helm interface to the [[https://github.com/emacs-taskrunner/emacs-taskrunner][emacs-taskrunner]] library. It provides
a convenient way to select targets/tasks within the current project and run them
in a custom compilation buffer.

The majority of the tasks/targets are gathered by either parsing
files(makefiles) or parsing the output of the taskrunner/build systems. This can
sometimes be a bit slow but this is made to be a (usually) one time cost. All
tasks retrieved are saved in a cache which persists after an emacs instance is
killed and then loaded up again when emacs/helm-taskrunner is started.

*Warning*: I have not worked with most of these build systems/taskrunners but
 support has been provided for them. Since my knowledge is fairly elementary, I
 might miss some subtleties. If you have any advice then please feel free to
 open a pull request on the repository hosting the backend for this project
 which can be found [[https://github.com/emacs-taskrunner/emacs-taskrunner][here]]. Thanks!
* Installation
** MELPA
This package will be submitted to melpa shortly.
** Manually
To install this package, you will need the following:

- [[https://github.com/bbatsov/projectile][projectile]] 
- [[https://github.com/bbatsov/helm-projectile][(OPTIONAL) helm-projectile]] 
- [[https://github.com/emacs-helm/helm][Helm]] 
- [[https://github.com/emacs-taskrunner/emacs-taskrunner][emacs-taskrunner]]
- [[https://github.com/jwiegley/emacs-async][emacs-async]] 
* Usage
** Functions
There are several entry points for this package:
- ~helm-taskrunner~: This function gathers all of the tasks from the
  taskrunners/build systems at the project root asynchronously. The tasks
  gathered are then presented in a helm buffer where the user can select one of
  them to run. The tasks can be ran in 6 different places:
  - at project root
  - at project root with extra arguments supplied by the user
  - at directory visited by the current buffer
  - at directory visited by the current buffer with extra arguments supplied by
    the user
  - at a custom directory selected by the user
  - at a custom directory selected by the user with extra arguments supplied by
    the user
    
    *Warning*: This function is asynchronous so the tasks might now appear for a
    few seconds. You are free to continue working until they do. If for some
    reason no tasks can be located, an error message will be displayed in the
    echo buffer.

    *Warning*: Whenever ~helm-taskrunner~ is used to run a command in another
    repository and the project is either one which uses ~Make~ , ~CMake~ or
    ~Meson/Ninja~ then the first four places(at project root, project root with
    args, currently visited directory and currently visited directory with args)
    will always use the build folder path locted by ~helm-taskrunner~. This means
    that using the currently visited directory will be ignored. This means that
    if there is a project where the command ~make build~ is invoked from a folder
    called ~~/my-project/some-folder~ then ~helm-taskrunner~ will call the command
    and run it in the directory ~~/my-project/build~.
- ~helm-taskrunner-buffers~: Every time a command is ran, a new buffer is spawned
  containing that commands output. This command displays a helm buffer letting
  the user select one of these command buffers and use an action on it. There
  are three main choices:
  - Open buffer
  - Kill buffer
  - Kill all command buffers
- ~helm-taskrunner-kill-all-buffers~: Kill all command buffers.
- ~helm-taskrunner-config-files~: The majority of taskrunner/build systems have
  some type of a configuration file associate with them(Make -> Makefile, Grunt
  -> gruntfile and so on...). When this function is invoked, a helm buffer will
  display all configuration files for all build/taskrunner systems detected at
  project root. The user can then select one of them and the file will be
  opened. This function will also work for build/taskrunner systems which have
  multiple configuration files(ex. Gradle or Cabal). If this is the case then
  the user will be presented with all possible such files and will again be able
  to select one of them to open.
- ~helm-taskrunner-rerun-last-command~: When invoked, this function will rerun the
  last command ran in the project. The command is ran in the same directory as
  before so if a different directory than the project root was selected, the
  command will be ran there again.
- ~helm-taskrunner-update-cache~: To speed up the task process and minimize wait
  time for the user, helm-taskrunner uses a cache for targets/tasks
  collected. When the ~helm-taskrunner~ command is called, the cache is
  checked. If the tasks have been cached then they are returned immediately and
  displayed to the user. Sometimes, more tasks can be added to the configuration
  files of the taskrunner/build system and they will not be displayed. When this
  command is called, the cache is overwritten and the tasks are gathered all
  over again and displayed to the user. If you have added new tasks and do not
  see them then call this function to update the cache and include them for
  selection.
** Variables
Some functions of interest are:
- ~helm-taskrunner-preferred-js-package-manager~: Choose if you prefer npm or
  yarn. This is usually deduced automatically depending on the presence of a
  ~package-lock.json~ file or ~yarn.lock~ file but if those are not found then this
  variable value is used if it is not nil. If this variable is left nil(its default) then ~npm~ is
  whenever the package manager cannot be deduced.
- ~helm-taskrunner-get-all-make-targets~: When this variable is not nil then all
  make targets are retrieved including those which start with ~_~ (underscore)
  which are usually considered to be "hidden". Its default value is t.
- ~helm-taskrunner-build-dir-list~: This variable holds a list of strings where
  each of them is a possible name of the build folder used in a project. Its
  default value contains: ~build, Build, buildDir, builddir, builds~. When
  helm-taskrunner is attempting to locate a ~Makefile~ for ~CMake~ or a ~build.ninja~
  for ~meson~ then all of the directories in this list are checked one by one. The first
  directory which contains one of these files is used as the build folder and
  build targets are collected from there. If you use a different name for build
  directories which you would like searched then please append the name to the
  list assigned to this variable.
- ~helm-taskrunner-source-dir-list~: This variable is similar to the build-dir-list
  one. It contains a list of strings and each one indicates a possible name for
  the source folder of a project. Its default value is: ~src, Src, source,
  Source~. When helm-taskrunner is attempting to locate the ~CMakeLists.txt~ or
  ~meson.build~ files, it checks these directories in case it is an in-source
  build. If you use a different name for source directories then please append
  that to the list assigned to this variable.
- ~helm-taskrunner-go-task-bin-path~: This variable contains the path used to
  locate the folder containing the golang binary for the [[https://github.com/go-task/task][go-task]] taskrunner. Its default is ~~/go/bin~.
- ~helm-taskrunner-mage-bin-path~: This variable contains the path used to
  locate the folder containing the golang binary for the [[https://github.com/magefile/mage][mage]] taskrunner. Its default is ~~/go/bin~.
- ~helm-taskrunner-doit-bin-path~: This variable contains the path used to
  locate the folder containing the binary for the
  [[https://github.com/pydoit/doit][doit]] taskrunner. Its default is
  ~~/.local/bin~.
** Note about emacs-async and emacs26 threads
This package works with a emacs 25 as a minimum require version. If emacs 26 and
above is used and it is compiled with threading support then the provided
threads are used. Otherwise, if emacs 25 or a larget version of emacs is used
*without* threading support then the fallback behaviour is to use the ~emacs-async~
package instead. The main difference between the two approaches is that the
~emacs-async~ package spawns a new instance of emacs which the threads provided by
emacs 26 and above run in the same instance. Either way, there isn't any
difference in how ~helm-taskrunner~ functions to the end user.
* Supported build/taskrunner systems
The following systems are currently supported:
- [X] yarn/npm
- [X] Gulp
- [X] Grunt
- [X] Gradle
- [X] Jake
- [X] Apache ant
- [X] mix
- [X] leinengen
- [X] rake
- [X] Make
- [X] CMake
- [X] Meson/Ninja
- [X] [[https://github.com/go-task/task][go-task]] 
- [X] [[https://github.com/magefile/mage][mage]] 
- [X] [[https://github.com/pydoit/doit][doit]] 
- [X] [[https://github.com/jakedeichert/mask][mask]] 
- [X] [[https://github.com/casey/just][just]] 
- [X] [[https://github.com/sagiegurari/cargo-make][cargo-make]]
- [X] cargo(Limited Support)
- [X] go compiler(Limited support)
- [X] Cask(Limited Support)
- [X] stack(Limited Support)
- [X] cabal(Limited Support)
* Bug Reports and Echancement Requests
If you have a bug report related to the user interface then please submit it
here. Otherwise, all other bug reports and enhancement requests should go to the
[[https://github.com/emacs-taskrunner/emacs-taskrunner][emacs-taskrunner repository]].
